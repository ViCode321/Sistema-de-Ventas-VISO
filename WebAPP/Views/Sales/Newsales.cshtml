@model project_DBA_VISO.Models.Views.NewsalesViewModel
@{
    ViewData["Title"] = "New Sales";
}

<div class="content">
    <div class="row">
        <div class="col-lg-8 col-sm-12 tabs_wrapper">
            <div class="page-header ">
                <div class="page-title">
                    <h4>Categorías</h4>
                    <!--<h6>Manage your purchases</h6>-->
                </div>
            </div>

            <ul class=" tabs owl-carousel owl-theme owl-product  border-0 ">
                @foreach (var category in Model.Categories)
                {
                    <li id="@category.Categoria_Id" class="category-item">
                        <div class="product-details">
                            @if (!string.IsNullOrEmpty(category.Image))
                            {
                                <img src="@Url.Content(category.Image)" alt="Product Image">
                            }
                            <h6>@Html.DisplayFor(m => category.Nombre)</h6>
                        </div>
                    </li>
                }
            </ul>
            <div class="tabs_container">
                <div class="tab_content">
                    <div class="row ">
                    </div>
                </div>
            </div>
        </div>

        <div class="col-lg-4 col-sm-12 ">
            <div class="order-list">
                <div class="orderid">
                    <h4>Lista de orden</h4>
                </div>
                <div class="actionproducts">
                    <ul>
                        <li>
                            <a class="deletebg delete-Sale">
                                <img src="~/img/icons/delete-2.svg" alt="img">
                            </a>
                        </li>
                    </ul>
                </div>
            </div>

            <div class="card card-order">
                <div class="card-body">
                    <div class="row">
                        <div class="col-12">
                            <a class="btn btn-adds" data-bs-toggle="modal" data-bs-target="#create">
                                <i class="fa fa-plus me-2"></i>Agregar cliente
                            </a>
                        </div>
                        <div class="col-lg-12">
                            <div class="select-split">
                                <div class="select-group w-100">
                                    <select class="select selectcl" id="clienteSelect" name="clienteId">
                                    </select>
                                </div>
                            </div>
                            <div class="select-split">
                                <div class="select-group w-100">
                                    <select class="select" id="currecieSelect" name="currecieId">
                                        <!-- Las opciones de los moneda se agregarán dinámicamente aquí -->
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="card-body pt-0">
                    <div class="totalitem">
                        <h4 id="total-products">Productos agregados: 0</h4>
                        <a id="clear-all">Borrar todo</a>
                    </div>
                    <div class="product-table">
                        <ul class="product-lists">
                            <!-- Aquí se agregarán los productos seleccionados -->
                        </ul>
                    </div>
                </div>
                <input type="hidden" name="Fecha" id="fecha" value="">
                <input type="hidden" name="Usuario_Id" class="user-input" value="@ViewData["userId"]" />

                <!--<div class="split-card">
                </div>-->
                <div class="card-body pt-0 pb-2">
                    <div class="setvalue">
                        <ul>
                            <li>
                                <h5>Subtotal </h5>
                                <h6 id="subtotal">C$0.00</h6>
                            </li>
                            <li class="total-value">
                                <h5>Total </h5>
                                <h6 id="total">C$0.00</h6>
                            </li>
                        </ul>
                    </div>
                    <div class="col-lg-12">
                        <button type="submit" class="btn btn-submit me-2">
                            Realizar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="create" tabindex="-1" aria-labelledby="create" aria-hidden="true">
    <div class="modal-dialog modal-lg modal-dialog-centered" role="document">
        <div class="modal-content">
            <form asp-controller="AddClient" method="post">

                <div class="modal-header">
                    <h5 class="modal-title">Agregar Cliente</h5>
                    <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="row">
                        <div class="col-lg-6 col-sm-12 col-12">
                            <div class="form-group">
                                <label for="nombre">Nombre del cliente</label>
                                <input type="text" id="nombre" name="nombre" class="form-control" required>
                            </div>
                        </div>
                        <div class="col-lg-6 col-sm-12 col-12">
                            <div class="form-group">
                                <label for="apellido">Apellido del cliente</label>
                                <input type="text" id="apellido" name="apellido" class="form-control" required>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" id="crearCliente">Crear</button>
                    <button type="button" class="btn btn-cancel" data-bs-dismiss="modal">Cancelar</button>
                </div>
            </form>

        </div>
    </div>
</div>

@{
    var url = Url.Action("GetProductsByCategory", "Sales");
    var url2 = Url.Action("AddClient", "Sales");
    var url3 = Url.Action("Newsales", "Sales");
}
@section scripts {
    <!--Get products by category-->
    <!--Get and add Clients, Newsale-->
    <script>
        $(document).ready(function () {

            var selectedProducts = [];

            $('.category-item').click(function () {
                var categoryId = $(this).attr('id');
                var url = '@url';
                $.ajax({
                    url: url,
                    type: 'GET',
                    data: { id: categoryId },
                    success: function (response) {
                        $('.tab_content').empty();
                        if (Array.isArray(response.$values)) {
                            response.$values.forEach(function (product) {
                                var isSelected = selectedProducts.includes(product.producto_Id.toString());
                                var productHtml = `
                                            <div class="col-lg-3 col-sm-6 d-flex">
                                                <div class="productset flex-fill ${isSelected ? 'active' : ''}">
                                                    <div class="productsetimg">
                                                        <img src="${product.image}" alt="img">
                                                        <h6>${product.descripcion}</h6>
                                                        <div class="check-product">
                                                            <i class="fa fa-check"></i>
                                                        </div>
                                                    </div>
                                                    <div class="productsetcontent">
                                                        <span class="hidden">${product.producto_Id}</span>
                                                        <input type="hidden" class="productId-input" value="${product.producto_Id}">
                                                        <h5>${product.categoryName}</h5>
                                                        <h4>${product.descripcion}</h4>
                                                        <h6>${product.precio}</h6>
                                                    </div>
                                                </div>
                                            </div>
                                        `;
                                $('.tab_content').append(productHtml);
                            });
                        } else {
                            console.error('Error: products is not an array');
                        }
                    },
                    error: function () {
                        alert('No se pudieron obtener los artículos');
                    }
                });
            });

            $(document).on('click', '.productset', function () {
                var productContainer = $(this).closest('.productset');
                var productId = productContainer.find('.productId-input').val();
                var index = selectedProducts.indexOf(productId);

                if (index !== -1) {
                    selectedProducts.splice(index, 1);
                    $(this).removeClass('active');
                } else {
                    selectedProducts.push(productId);
                    $(this).addClass('active');
                }
            });


            $('#currecieSelect').change(function () {
                updateTotals();
            });

            // Obtener la lista de monedas y agregar opciones al select
            $.ajax({
                url: '/Sales/GetCurenncies',
                type: 'GET',
                success: function (response) {
                    // Limpiar el select
                    $('#currecieSelect').empty();
                    $.each(response.$values, function (index, currency) {
                        $('#currecieSelect').append('<option value="' + currency.moneda_Id + '">' + currency.tipo + '</option>');
                    });
                },
                error: function () {
                    alert('Error al cargar la lista de monedas');
                }
            });

            // Obtener la lista de clientes y agregar opciones al select
            $.ajax({
                url: '/Sales/GetClients',
                type: 'GET',
                success: function (response) {
                    // Limpiar el select
                    $('#clienteSelect').empty();
                    // Agregar opciones para cada cliente
                    $.each(response.$values, function (index, client) {
                        $('#clienteSelect').append('<option value="' + client.cliente_Id + '">' + client.nombre + ' ' + client.apellido + '</option>');
                    });
                },
                error: function () {
                    alert('Error al cargar la lista de clientes');
                }
            });

            $('#create .btn-success').click(function () {
                var nombre = $('#create input[name="nombre"]').val();
                var apellido = $('#create input[name="apellido"]').val();
                var url2 = '@url2';
                var token = $('input[name="__RequestVerificationToken"]').val();

                // Enviar los datos del nuevo cliente al servidor
                $.ajax({
                    url: url2,
                    type: 'POST',
                    data: {
                        nombre: nombre,
                        apellido: apellido,
                        __RequestVerificationToken: token // Incluir el token en los datos
                    },
                    success: function (response) {
                        if (response.success) {
                            Swal.fire({
                                title: "Usuario",
                                text: 'Usuaio agregado con éxito',
                                icon: "success",
                                confirmButtonColor: "#d33",
                                confirmButtonText: "OK"
                            });
                            $('#nombre').val('');
                            $('#apellido').val('');

                            var clienteId = response.clienteId;
                            var clienteNombre = nombre + ' ' + apellido;
                            // Agregar la nueva opción al select
                            $('.selectcl').append('<option value="' + clienteId + '">' + clienteNombre + '</option>');
                            // Cerrar el modal
                            $('#create').modal('hide');
                        } else {
                            Swal.fire({
                                title: "Error",
                                text: 'Los datos ingresados son erroneos o no están completos',
                                icon: "error",
                                confirmButtonColor: "#d33",
                                confirmButtonText: "OK"
                            });
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log(textStatus, errorThrown);
                    }
                });
            });

            var products = [];

            // Manejar el clic en los botones de incremento y decremento
            $(document).on('click', '.button-plus, .button-minus', function () {
                var $input = $(this).siblings('.quantity-field');
                var currentValue = parseInt($input.val());

                if ($(this).hasClass('button-plus')) {
                    currentValue += 1;
                } else if (currentValue > 0) {
                    currentValue -= 1;
                }

                $input.val(currentValue);

                // Actualizar el valor del campo de entrada oculto
                $(this).closest('.productcontet').find('.quantity-input').val(currentValue);

                updateTotals();
            });


            // Función para eliminar todos los elementos de la lista visual y los productos del array
            function removeAllItems() {
                // Remover la clase 'selected' de los productos seleccionados visualmente
                $('.productset.active').removeClass('active');

                // Vaciar la lista visual
                $('.product-lists').empty();

                // Vaciar el array de productos
                products = [];
                selectedProducts = [];
                // Actualizar el contador de productos y los totales
                updateProductCount();
                updateTotals();

                // Resetear los selectores de moneda y cliente
                $('#currecieSelect').val('1').change(); // Establecer el valor del selector de moneda al valor predeterminado y forzar un evento de cambio
                $('#clienteSelect').val('1').change(); // Establecer el valor del selector de cliente al valor predeterminado y forzar un evento de cambio
            }

            // Manejar el clic en el enlace "Borrar todo"
            $('#clear-all').click(function () {
                removeAllItems();
            });

            // Manejar el clic en el botón de check-product
            $(document).on('click', '.productset', function () {
                var productContainer = $(this).closest('.productset');
                var productId = productContainer.find('.productId-input').val();
                var index = products.findIndex(function (product) {
                    return product.id === productId;
                });

                var currentDate = new Date();
                var formattedDate = currentDate.toISOString().slice(0, 19).replace('T', ' ');
                $('#fecha').val(formattedDate);

                if (index !== -1) {
                    products.splice(index, 1);
                    //$(this).removeClass('selected');
                    $(this).removeClass('active');
                    $(`.product-lists li:contains(${productId})`).remove(); // Remover el elemento que contiene el ID del producto
                } else {
                    // Obtener la información del producto y agregarlo a la lista como antes
                    var productName = productContainer.find('.productsetcontent h4').text().trim();
                    var productCode = productContainer.find('.productsetcontent span').text().trim();
                    var productPrice = parseFloat(productContainer.find('.productsetcontent h6').text());
                    var productImage = $(this).find('.productsetimg img').attr('src');
                    var product = {
                        id: productId,
                        name: productName,
                        code: productCode,
                        price: productPrice,
                        image: productImage
                    };
                    products.push(product);

                    var productHtml = `
                            <li>
                                <div class="productimg">
                                    <div class="productimgs">
                                        <img src="${product.image}" alt="img">
                                    </div>
                                    <div class="productcontet">
                                        <h4>${product.name}</h4>
                                        <div class="productlinkset">
                                            <h5>Código: ${product.code}</h5>
                                        </div>
                                        <div class="increment-decrement">
                                            <div class="input-groups">
                                                <input type="button" value="-" class="button-minus dec button">
                                                <input type="text" value="1" class="quantity-field">
                                                <input type="button" value="+" class="button-plus inc button ">
                                            </div>
                                        </div>
                                        <div class="productimgs">
                                            <h5 value="${product.price}">C$: ${product.price}</h5>
                                        </div>
                                        <input type="hidden" name="productIds" class="productId-input" value="${product.code}">
                                        <input type="hidden" name="cantidades" value="1" class="quantity-input">
                                        <input type="hidden" name="precios" value="${product.price}" class="price-input">
                                        <input type="hidden" name="monto_final" class="total-input">
                                    </div>
                                </div>
                            </li>
                            `;
                    // Remover cualquier espacio en blanco antes de agregar el nuevo elemento
                    $('.product-lists').children().remove(':empty').end().append(productHtml);
                }

                // Actualizar la cantidad de productos y los totales
                updateProductCount();
                updateTotals();
            });

            $(".btn-submit").click(function (event) {
                event.preventDefault();

                // Obtener los valores de clienteId y currecieId
                var clienteId = $('#clienteSelect').val();
                var currecieId = $('#currecieSelect').val();

                // Obtener el token de validación antifalsificación de solicitudes
                var token = $('input[name="__RequestVerificationToken"]').val();

                var totalinput = $('input[name="monto_final"]').val();
                var total = parseFloat(totalinput);

                // Obtener los IDs, las cantidades y los precios de los productos seleccionados
                var productIds = [];
                var cantidades = [];
                var precios = [];
                $('.product-lists li').each(function () {
                    productIds.push($(this).find('.productId-input').val());
                    cantidades.push($(this).find('.quantity-field').val());
                    precios.push($(this).find('.price-input').val());
                });

                // Convertir los valores a entero, excepto el precio que se mantendrá como flotante
                var clienteIdInt = parseInt(clienteId);
                var currecieIdInt = parseInt(currecieId);

                var productIdInt = productIds.map(function (productId) {
                    return parseInt(productId);
                });

                // Convertir las cantidades a enteros
                var cantidadesInt = cantidades.map(function (cantidad) {
                    return parseInt(cantidad);
                });

                // Convertir los precios a flotantes
                var preciosFloat = precios.map(function (precio) {
                    return parseFloat(precio);
                });

                // Obtener el valor del usuario Id
                var userId = $(".user-input").val();

                // Crear el objeto newSale que coincide con la estructura de NewsalesViewModel
                var newSale = {
                    Invoices: [{
                        Cliente_Id: clienteIdInt,
                        Moneda_Id: currecieIdInt,
                        Monto_final: total
                    }],
                    Invoice_details: [],
                    Users: [{
                        Usuario_Id: userId
                    }]
                };

                // Llenar Invoice_details con los productos seleccionados
                for (var i = 0; i < productIdInt.length; i++) {
                    newSale.Invoice_details.push({
                        Producto_Id: productIdInt[i],
                        Cantidad: cantidadesInt[i],
                        Precio: preciosFloat[i],
                        Total_ventas: cantidadesInt[i] * preciosFloat[i]
                    });
                }

                // Enviar los datos al servidor
                var url = '@url3';

                $.ajax({
                    url: url,
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(newSale),
                    headers: {
                        __RequestVerificationToken: token
                    },
                    success: function (response) {
                        if (response.success) {
                            Swal.fire({
                                title: "¡Venta realizada!",
                                text: response.message,
                                icon: "success",
                                confirmButtonColor: "#3085d6",
                                confirmButtonText: "Ok",
                            });
                            removeAllItems();
                        } else {
                            Swal.fire({
                                title: "¡Error!",
                                text: response.message,
                                icon: "error",
                                confirmButtonColor: "#d33",
                                confirmButtonText: "OK"
                            });
                            removeAllItems();
                        }
                    },
                    error: function (jqXHR, textStatus, errorThrown) {
                        console.log(textStatus, errorThrown);
                        removeAllItems();
                    }
                });
            });


            // Función para actualizar la cantidad de productos
            function updateProductCount() {
                $('#total-products').text('Productos agregados: ' + products.length);
            }
            // Función para actualizar los totales
            function updateTotals() {
                var subtotal = 0;
                var currencyType = $('#currecieSelect option:selected').text();

                $('.product-lists li').each(function () {
                    var quantity = parseInt($(this).find('.quantity-field').val());
                    var price = parseFloat($(this).find('.productimgs h5').text().replace('C$: ', ''));

                    // Aplicar factor de conversión si es necesario
                    if (currencyType === 'Dolar') {
                        price /= 36; // Multiplicar por 36 para convertir a Dólar
                    }

                    subtotal += quantity * price;
                });

                var total = subtotal;
                if (currencyType === 'Dolar') {
                    $('#subtotal').text('U$' + subtotal.toFixed(2));
                    $('#total').text('U$' + total.toFixed(2));
                } else {
                    $('#subtotal').text('C$' + subtotal.toFixed(2));
                    $('#total').text('C$' + total.toFixed(2));
                }
                $('input[name="monto_final"]').val(total.toFixed(2));
            }
        });
    </script>
    <!--Show message danger-->
    <script>
        $(document).ready(function () {
            $(".delete-Sale").on("click", function () {
                Swal.fire({
                    title: "¿Quieres cancelar la compra?",
                    icon: "warning",
                    showCancelButton: true,
                    confirmButtonColor: "#3085d6",
                    cancelButtonColor: "#d33",
                    confirmButtonText: "Sí, cancelarla",
                    cancelButtonText: "Cancelar"
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/Home/Index'; // Redirigir a la lista de ventas después de eliminar el producto
                    }
                });
            });
        });
    </script>
}
